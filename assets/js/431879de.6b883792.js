"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[714],{7923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(4848),r=t(8453);const s={slug:"/filestore",title:"File Stores"},l=void 0,o={id:"filestores/index",title:"File Stores",description:"[//]: # (Copyright 2024 Jiaqi Liu)",source:"@site/docs/filestores/index.md",sourceDirName:"filestores",slug:"/filestore",permalink:"/docs/filestore",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/athena/tree/master/docs/docs/filestores/index.md",tags:[],version:"current",frontMatter:{slug:"/filestore",title:"File Stores"},sidebar:"docSidebar",previous:{title:"JSON API",permalink:"/docs/client-apis/json-api"},next:{title:"Spinning Up A Local Swift Instance",permalink:"/docs/filestores/local-swift"}},a={},d=[{value:"Included Stores",id:"included-stores",level:2},{value:"Swift Store",id:"swift-store",level:3},{value:"HDFS Store",id:"hdfs-store",level:3},{value:"Overriding the Store",id:"overriding-the-store",level:2},{value:"Custom Stores",id:"custom-stores",level:2},{value:"Multiple Stores",id:"multiple-stores",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A file store is responsible for:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"reading and writing files (.mp3, .pdf, etc.) to/from an object store. Files of the following types are supported by\nAthena"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PDF"}),"\n",(0,i.jsx)(n.li,{children:"MP4"}),"\n",(0,i.jsx)(n.li,{children:".txt file"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'providing "transactions" that make all file operations atomic in a single request.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"declaring the native object store client it delegates persistence operations to."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If a file store implementation is unable to handle a file InputStream, Athena pushes these responsibilities to the\nobject store."}),"\n",(0,i.jsx)(n.h2,{id:"included-stores",children:"Included Stores"}),"\n",(0,i.jsx)(n.p,{children:"Athena comes bundled with a number of file stores:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Swift Store - A file store that can map operations on a file to an underlying OpenStack Swift API. Athena has\nexplicit support for Swift"}),"\n",(0,i.jsx)(n.li,{children:"HDFS Store - File is persisted on Hadoop HDFS."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:['It is assumed that the "HDFS Store" means a ',(0,i.jsx)(n.strong,{children:"single-cluster"})," HDFS. However, the Athena architecture does not preclude\nimplementing a multi-cluster HDFS store"]})}),"\n",(0,i.jsx)(n.p,{children:"Stores can be included through the following artifact dependencies:"}),"\n",(0,i.jsx)(n.h3,{id:"swift-store",children:"Swift Store"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.github.qubitpi.athena</groupId>\n    <artifactId>athena-filestore-swift</artifactId>\n    <version>${version.athena}</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"hdfs-store",children:"HDFS Store"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.github.qubitpi.athena</groupId>\n    <artifactId>athena-filestore-hdfs</artifactId>\n    <version>${version.athena}</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"overriding-the-store",children:"Overriding the Store"}),"\n",(0,i.jsxs)(n.p,{children:["To change the store, override the ",(0,i.jsx)(n.code,{children:"FileStore"})," binding. For example, to use a store called ",(0,i.jsx)(n.code,{children:"SomeCustomFileStore"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class AppBinderFactory extends AbstractBinderFactory {\n\n    ...\n\n    @Override\n    protected Class<? extends FileStore> buildFileStore() {\n        return SomeCustomFileStore.class;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-stores",children:"Custom Stores"}),"\n",(0,i.jsxs)(n.p,{children:["Custom stores can be written by implementing the ",(0,i.jsx)(n.code,{children:"FileStore"})," interface. Take Amazon S3 for instance"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Singleton\npublic class S3FileStore implements FileStore {\n\n    private final AmazonS3 s3client;\n    private final FileIdGenerator fileIdGenerator;\n\n    @Inject\n    public S3FileStore(@NotNull final AmazonS3 s3client, @NotNull final FileIdGenerator fileIdGenerator) {\n        this.s3client = Objects.requireNonNull(s3client);\n        this.fileIdGenerator = Objects.requireNonNull(fileIdGenerator);\n    }\n\n    @Override\n    public String upload(final File file) {\n        final String fileId = fileIdGenerator.apply(file);\n\n        s3client.putObject(\n                file.getMetaData().getFileType().name(),\n                fileId,\n                file.getFileContent(),\n                new ObjectMetadata()\n        );\n\n        return fileId;\n    }\n\n    @Override\n    public InputStream download(final String fileId) {\n       return getS3client().getObject(...);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"multiple-stores",children:"Multiple Stores"}),"\n",(0,i.jsx)(n.p,{children:"A common pattern in Athena is the need to support multiple file stores. Typically, one file store manages most files,\nbut some others may require a different object storage backend or have other needs to specialize the behavior of the\nstore. The multiplex store in Athena manages multiple stores - delegating calls to the appropriate store which is\nresponsible for a particular file."}),"\n",(0,i.jsxs)(n.p,{children:["This is a ",(0,i.jsx)(n.a,{href:"https://trello.com/c/bHwNl4sk",children:"feature"})," yet to be offered soon."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);